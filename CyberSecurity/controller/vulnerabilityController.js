const path = require("path")
const { exec } = require('child_process');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');
const archiver = require('archiver');

function getPathUserFolders(uniqueId) {
    let folderPath = path.resolve(__dirname, '..');
    folderPath = path.join(folderPath, "userFolders", uniqueId)
    return folderPath
}
function getPathBash() {
    let bashPath = path.resolve(__dirname, '..');
    bashPath = path.join(bashPath, "bashs/vulnerability/scan.sh")
    return bashPath
}

function executeBash(scriptPath, ip, port, location, res, uniqueId) {
    exec(`bash ${scriptPath} ${ip} ${port} ${location}`, (error, stdout, stderr) => {
        if (error) {
            return res.status(500).json({ message: "Error while scan Vulnerabilities" });
        }
        if (stderr) {
            return res.status(500).json({ message: "Error while scan Vulnerabilities" });

        }
        return res.status(200).json({ message: "the scan is completed", id: uniqueId })

    })
}
function scanVulnerability(req, res) {
    const ip = req.body.ip
    const port = req.body.port
    const uniqueId = uuidv4();
    const pathBash = getPathBash()
    const location = getPathUserFolders(uniqueId)
    executeBash(pathBash, ip, port, location, res, uniqueId)
}
function downloadFolder(req, res) {
    const uniqueId = req.body.id;
    const location = getPathUserFolders(uniqueId)

    if (!fs.existsSync(location)) {
        return res.status(404).send({message:'Folder not found'});
    }

    const zipFileName = `report-${uniqueId}.zip`;
    res.setHeader('Content-Disposition', `attachment; filename=${zipFileName}`);
    res.setHeader('Content-Type', 'application/zip');

    const archive = archiver('zip', { zlib: { level: 9 } });

    archive.on('error', (err) => {
        return res.status(500).send({ message: err.message });
    });

    archive.pipe(res);
    archive.directory(location, false);
    archive.finalize();

    // Once the response is finished, delete the folder
    res.on('finish', () => {
        fs.rmdirSync(location, { recursive: true });
    });
}
function removeFolderWithoutDownload(req,res)
{
    const uniqueId = req.body.id;
    const location = getPathUserFolders(uniqueId)

    if (!fs.existsSync(location)) {
        return res.status(404).send({message:'Folder not found'});
    }
    fs.rmdirSync(location, { recursive: true });
    res.status(200).json({message:"The folder is deleted without download it"})
}
module.exports = { scanVulnerability,downloadFolder ,removeFolderWithoutDownload}
