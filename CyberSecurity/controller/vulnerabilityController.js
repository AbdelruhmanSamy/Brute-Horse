const path = require("path")
const { exec } = require('child_process');
const fs = require('fs');
const archiver = require('archiver');
const { v4: uuidv4 } = require('uuid');
const convertMultipleTextToPDF = require("./multipleTxtFileConvertion");
const { use } = require("../router/vulnerabilityRouter");
//this function for get the path of userFolders
function getPathUserFolders() {
    const uniqueId = uuidv4()
    let folderPath = path.resolve(__dirname, '..');
    folderPath = path.join(folderPath, "userFolders", uniqueId)
    return folderPath
}
// create folder 
async function createFolder(location) {
    try {
        await fs.promises.mkdir(location, { recursive: true });
        console.log('Folder created successfully');
    } catch (err) {
        console.error(`Failed to create folder: ${err.message}`);
    }
}
// this get the path for specific bash file it take like vulnerability/nse.sh
function getPathBash(subFilePath) {
    let bashPath = path.resolve(__dirname, '..');
    bashPath = path.join(bashPath, `bashs/${subFilePath}`)
    return bashPath
}
function addFiles(inputFiles, titles, file, title) {
    if (fs.existsSync(file)) {
        inputFiles.push(file)
        titles.push(title)
    }
}
// it execute the bash for vulnerability
function executeBash(command, location, nameOfFile, inputFiles, titles) {
    return new Promise((resolve, reject) => {
        exec(command, async (error, stdout, stderr) => {
            if (error) {
                console.error(`Error executing ${nameOfFile} scan:`, error);
                return reject(error); // Reject if there's an error
            }

            if (stderr) {
                console.warn(`Warning from ${nameOfFile} scan:`, stderr);
            }

            console.log(`${nameOfFile} scan completed successfully.`);

            // Define the path of the expected output file
            const txtFilePath = `${location}/${nameOfFile}.txt`;
            addFiles(inputFiles, titles, txtFilePath, nameOfFile)
            resolve()
        })
    })

}
function convertFilesToPDF(inputFiles, titles, location, callback) {

    const title = "Brute-Horse Result"
    const outputFile = `${location}/output.pdf`;

    convertMultipleTextToPDF(inputFiles, outputFile, titles, title, (err) => {
        if (err) {
            console.error('Failed to convert text files to PDF:', err);
        } else {
            console.log('PDF conversion completed successfully!');
            callback(null)
        }
    });
}
async function scanVulnerability(nameOfTool, ip, location, inputFiles, titles) {
    let nameOfBashFile = ""
    if (nameOfTool === 'wapiti')
        nameOfBashFile = "vulnerability/scan.sh"
    else nameOfBashFile = "vulnerability/nse.sh"
    const bashPath = getPathBash(nameOfBashFile)
    const command = `bash ${bashPath} ${ip} ${location}`
    await executeBash(command, location, nameOfTool, inputFiles, titles)
}
async function scanServers(nameOfTool, ip, location,choice,userName, inputFiles, titles) {
    if(!userName)
    userName=""
    console.log(userName)
    let nameOfBashFile = ""
    if (nameOfTool === 'ftp')
        nameOfBashFile = '"Anonymous FTP"/ftp.sh'
    else nameOfBashFile = '"Anonymous SMB"/smb.sh'
    const bashPath = getPathBash(nameOfBashFile)
    const command = `bash ${bashPath} ${ip} ${choice} ${location} ${userName}`
    await executeBash(command, location, nameOfTool, inputFiles, titles)
}
async function totalProcess(req, res) {
    const location = getPathUserFolders()
    const inputFiles = []
    const titles = []
    const ip = req.body.ip
    await createFolder(location)
    await scanVulnerability("wapiti", ip, location, inputFiles, titles)  
    await scanVulnerability("nse", ip, location, inputFiles, titles)
    await scanServers("ftp", ip, location,req.body.ftpChoice,req.body.ftpUserName, inputFiles, titles)
    await scanServers("smb", ip, location,req.body.smbChoice,req.body.smbUserName, inputFiles, titles)

    convertFilesToPDF(inputFiles, titles, location, (err) => {
        if (err) {
            console.error('Failed to convert text files to PDF:', err);
        } else {
            downloadFolder(req, res, location)
        }
    })


}
function downloadFolder(req, res, location) {


    if (!fs.existsSync(location)) {
        return res.status(404).send({ message: 'Folder not found' });
    }

    const zipFileName = `report.zip`;
    res.setHeader('Content-Disposition', `attachment; filename=${zipFileName}`);
    res.setHeader('Content-Type', 'application/zip');

    const archive = archiver('zip', { zlib: { level: 9 } });

    archive.on('error', (err) => {
        return res.status(500).send({ message: err.message });
    });

    archive.pipe(res);
    archive.directory(location, false);
    archive.finalize();

    // Once the response is finished, delete the folder
    res.on('finish', () => {
        fs.rmdirSync(location, { recursive: true });
    });
}
function removeFolderWithoutDownload(req, res, location) {


    if (!fs.existsSync(location)) {
        return res.status(404).send({ message: 'Folder not found' });
    }
    fs.rmdirSync(location, { recursive: true });

    res.status(200).json({ message: "The folder is deleted without download it" })
}
module.exports = totalProcess
